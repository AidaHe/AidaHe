<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AidaHe‘s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-30T09:42:13.905Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AidaHe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Moya网络请求封装</title>
    <link href="http://yoursite.com/2020/04/30/2020/04/moyawrap/"/>
    <id>http://yoursite.com/2020/04/30/2020/04/moyawrap/</id>
    <published>2020-04-30T09:41:00.000Z</published>
    <updated>2020-04-30T09:42:13.905Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近项目中使用了Moya来做网络请求，于是对其简单封装一下以方便使用<br><a href="https://github.com/Moya/Moya" target="_blank" rel="noopener">Moya: https://github.com/Moya/Moya</a></p></blockquote><a id="more"></a><h3 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">final class RequestLogPlugin: PluginType&#123;</span><br><span class="line">    </span><br><span class="line">    func willSend(_ request: RequestType, target: TargetType) &#123;</span><br><span class="line">        Log(&quot;[URL]:\(request.request!.url!.absoluteString)&quot;)</span><br><span class="line">        if(request.request?.httpBody !&#x3D; nil)&#123;</span><br><span class="line">            let JSONString &#x3D; NSString(data:(request.request?.httpBody!)!,encoding: String.Encoding.utf8.rawValue)</span><br><span class="line">            Log(&quot;[Param:]---------------------------------[&quot;)</span><br><span class="line">            Log(JSONString!)</span><br><span class="line">            Log(&quot;[Param:]---------------------------------]&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要是添加了两个打印信息，一个请求的接口地址，一个是请求时的参数，方便在开发过程中调试。</p><h3 id="请求类"><a href="#请求类" class="headerlink" title="请求类"></a>请求类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import Moya</span><br><span class="line">import SwiftyJSON</span><br><span class="line"></span><br><span class="line">let MAProvider &#x3D; MoyaProvider&lt;MultiTarget&gt;( plugins: [RequestLogPlugin()])</span><br><span class="line">struct AHNetwork &#123;</span><br><span class="line">    </span><br><span class="line">    static func request(_ target:MultiTarget,success successCallback: @escaping (String) -&gt; Void,failure failureCallback: @escaping (MoyaError) -&gt; Void)&#123;</span><br><span class="line">        </span><br><span class="line">        MAProvider.request(target) &#123; (result) in</span><br><span class="line">            switch result &#123;</span><br><span class="line">            case let .success(response):</span><br><span class="line">                let jsonData &#x3D; response.data</span><br><span class="line">                let jsonString &#x3D; String.init(data: jsonData, encoding: .utf8)</span><br><span class="line">                Log(&quot;[Reponse:]---------------------------------[&quot;)</span><br><span class="line">                Log(jsonString!)</span><br><span class="line">                Log(&quot;[Reponse:]---------------------------------]&quot;)</span><br><span class="line">                successCallback(jsonString!)</span><br><span class="line">            case let .failure(error):</span><br><span class="line">                Log(&quot;[Error:]\(String(describing: error.errorDescription))&quot;)</span><br><span class="line">                failureCallback(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1，定义一个<code>Provider</code>使用我们刚定义的<code>plugin</code><br>2，将请求方法都封装在AHNetwork中的<code>request</code>方法中，此方法需传入<code>target</code>，一个<code>success</code>的逃逸闭包和<code>failure</code>的逃逸闭包。<br>2，这里的<code>Log</code>函数为一个全局的打印函数，在本文最后贴出。<br>3，在这个函数内可以根据实际的业务需求添加一些需要统一处理的逻辑，比如<code>token</code>过期，错误处理之类的逻辑。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import Moya</span><br><span class="line"></span><br><span class="line">public enum AHVideoAPi &#123;</span><br><span class="line">    </span><br><span class="line">    case fetchVideoCategory</span><br><span class="line">    case fetchVideoCategoryDetail(_ id:Int)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension AHVideoAPi : TargetType&#123;</span><br><span class="line">    </span><br><span class="line">    public var baseURL: URL &#123;</span><br><span class="line">        return URL(string: &quot;https:&#x2F;&#x2F;api.apiopen.top&quot;)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public var path: String &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .fetchVideoCategory:</span><br><span class="line">            return &quot;&#x2F;videoCategory&quot;</span><br><span class="line">        case .fetchVideoCategoryDetail:</span><br><span class="line">            return &quot;&#x2F;videoCategoryDetails&quot;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public var method: Moya.Method &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .fetchVideoCategory,.fetchVideoCategoryDetail:</span><br><span class="line">            return .post</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public var sampleData: Data &#123;</span><br><span class="line">        return &quot;&#123;&#125;&quot;.data(using: String.Encoding.utf8)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public var task: Task &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .fetchVideoCategory:</span><br><span class="line">            return .requestPlain</span><br><span class="line">        case .fetchVideoCategoryDetail(let id):</span><br><span class="line">            let params: [String: Any] &#x3D; [&quot;id&quot;:id]</span><br><span class="line">            return .requestParameters(parameters: params,encoding: URLEncoding.default)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public var headers: [String : String]? &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Api类就是Moya的常规使用，这里就不多做解释了</p><h3 id="请求案例"><a href="#请求案例" class="headerlink" title="请求案例"></a>请求案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AHNetwork.request(MultiTarget(AHVideoAPi.fetchVideoCategory), success: &#123; (_) in</span><br><span class="line">    &#x2F;&#x2F;&#x2F; do something success</span><br><span class="line">&#125;) &#123; (_) in</span><br><span class="line">    &#x2F;&#x2F;&#x2F; do something error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Log函数"><a href="#Log函数" class="headerlink" title="Log函数"></a>Log函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func Log&lt;T&gt;(_ message:T,file:String &#x3D; #file,funcName:String &#x3D; #function,lineNum:Int &#x3D; #line)&#123;</span><br><span class="line">    </span><br><span class="line">    #if DEBUG</span><br><span class="line"></span><br><span class="line">    let file &#x3D; (file as NSString).lastPathComponent;</span><br><span class="line"></span><br><span class="line">    print(&quot;\(file):(\(lineNum))--\(message)&quot;);</span><br><span class="line">    </span><br><span class="line">    #endif  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近项目中使用了Moya来做网络请求，于是对其简单封装一下以方便使用&lt;br&gt;&lt;a href=&quot;https://github.com/Moya/Moya&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Moya: https://github.com/Moya/Moya&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Moya" scheme="http://yoursite.com/tags/Moya/"/>
    
  </entry>
  
  <entry>
    <title>序</title>
    <link href="http://yoursite.com/2020/04/25/2020/04/preface/"/>
    <id>http://yoursite.com/2020/04/25/2020/04/preface/</id>
    <published>2020-04-25T02:54:00.000Z</published>
    <updated>2020-04-25T04:32:07.431Z</updated>
    
    <content type="html"><![CDATA[<p><em>黄色的树林里分出两条路</em><br><em>可惜我不能同时涉足</em><br><em>我在那路口久久伫立</em><br><em>我向着一条路极目望去</em><br><em>直到它消失在丛林深处</em><br><em>但我却选了另外一条路</em><br><em>因此走出了这迥异的旅途</em></p><div style="text-align: right">摘自《未选择的路》</div><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&#8194;&#8194;前面那首诗透露出的浪漫主义是令我非常神往的，所以放在了本站第一篇博客的顶部。笔者至今从事iOS开发已经三年了，三年了，开发水平依旧是平平无奇。记得刚毕业那会我给自己设定了两个目标，一个就是三年之内一定要独立开发一款自己的APP，另一个就是一个月至少更新四篇博客。如今博客压根没写几篇，APP尚未有任何雏形。笔者今天将穿上盔甲，拿起宝剑，踏上战马，再次出发。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;黄色的树林里分出两条路&lt;/em&gt;&lt;br&gt;&lt;em&gt;可惜我不能同时涉足&lt;/em&gt;&lt;br&gt;&lt;em&gt;我在那路口久久伫立&lt;/em&gt;&lt;br&gt;&lt;em&gt;我向着一条路极目望去&lt;/em&gt;&lt;br&gt;&lt;em&gt;直到它消失在丛林深处&lt;/em&gt;&lt;br&gt;&lt;em&gt;但我却选了另外一条路&lt;/em&gt;&lt;br&gt;&lt;em&gt;因此走出了这迥异的旅途&lt;/em&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: right&quot;&gt;摘自《未选择的路》&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="序" scheme="http://yoursite.com/tags/%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/21/hello-world/"/>
    <id>http://yoursite.com/2020/04/21/hello-world/</id>
    <published>2020-04-21T13:00:24.786Z</published>
    <updated>2020-04-21T13:00:24.786Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
